uniqueName: rsa
readableName: RSA
description: A popular and simple cryptosystem that has multiplicative homomorphic properties. It is not semantically secure as it is unpadded, but otherwise relies on the large number factorisation problem to be secure.
bitLengths:
  - bitLength: 8
    maxInt: 99
  - bitLength: 16
    maxInt: 9999
stages:
  setup:
    - name: Key Generation
      preDescription: This phase sets up the keys that are used in both encryption and decryption.
      steps:
        - description: A random prime number
          compute: p = generateRandomPrime()
        - description: A random prime number
          compute: q = generateRandomPrime()
        - description: \(p \times q\)
          compute: n = p * q
          expose: true
        - description: \(\phi(p \times q)\)
          compute: l = (p - 1) * (q - 1)
        - description: A random integer that is coprime with \(l\)
          compute: e = findCoPrime(l)
          expose: true
        - description: \(e^{-1} \bmod l\)
          compute: d = e $ l
      postDescription: The Public key consists of \((n, e)\) and the Private key consists of \((n, d)\). The other variables \((p, q, l)\) can be discarded but not revealed as they are used to calculate \(d\).
  encryption:
    - name: Encryption
      preDescription: Next, we calculate \(aX\) and \(bX\) as our encrypted values of \(a\) and \(b\). Note that we only use our public key to encrypt the values.
      steps:
        - description: \(a^e \bmod n\)
          compute: aX = a & e,n
          expose: true
        - description: \(b^e \bmod n\)
          compute: bX = b & e,n
          expose: true
      postDescription:
  backend:
    x:
      name: Multiplication
      steps:
        - description: \(aX \times bX\)
          compute: cX = aX * bX
  decryption:
    - name: Decryption
      steps:
        - description: \(c = cX^d \bmod n\)
          compute: c = cX & d,n
