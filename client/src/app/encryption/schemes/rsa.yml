uniqueName: rsa
readableName: RSA
description: A popular and simple cryptosystem created by Ron Rivest, Adi Smahir and Leonard Adleman that unintentionally has multiplicative homomorphic properties. It is not semantically secure as it is unpadded, but otherwise relies on the large number factorisation problem to be secure.
bitLengths:
  - bitLength: 8
    maxInt: 99
stages:
  setup:
    - name: Key Generation
      preDescription: This phase sets up the keys that are used in both encryption and decryption.
      steps:
        - description: A random prime number
          compute: p = generateRandomPrime()
        - description: A random prime number
          compute: q = generateRandomPrime()
        - description: \(p \times q\)
          compute: n = p * q
          expose: true
        - description: \(\phi(p \times q)\)
          compute: l = (p - 1) * (q - 1)
        - description: A random integer that is coprime with \(l\)
          compute: e = findCoPrime(l)
          expose: true
        - description: \(e^{-1} \bmod l\)
          compute: d = e $ l
      postDescription: The Public key consists of \((n, e)\) and the Private key consists of \((n, d)\). The other variables \((p, q, l)\) can be discarded but not revealed as they are used to calculate \(d\).
  encryption:
    - name: Encryption
      preDescription: Next, we calculate \(aX\) and \(bX\) as our encrypted values of \(a\) and \(b\). Note that we only use our public key to encrypt the values.
      steps:
        - description: \(a^e \bmod n\)
          compute: aX = a & e,n
          expose: true
        - description: \(b^e \bmod n\)
          compute: bX = b & e,n
          expose: true
      postDescription: \(aX\) and \(bX\) are one way as per the large number factorisation problem. In practice we would use much larger key-spaces (1024+ bit) to create a sufficiently hard enough problem.
  backend:
    x:
      name: Multiplication
      preDescription: Any computer in the cloud can calculate the following without being able to learn the values of \(a\) or \(b\).
      steps:
        - description: \(aX \times bX\)
          compute: cX = aX * bX
      postDescription: The homomorphic property of this cryptosystem is \(D(aX \times bX) = a \times b\) where \(D\) is the decryption algorithm.
  decryption:
    - name: Decryption
      preDescription: Finally, using the decryption algorithm, we can get our answer for \(c\).
      steps:
        - description: \(cX^d \bmod n\)
          compute: c = cX & d,n
      postDescription: We are able to decrypt the returned \(cX\) becase we know the value of \(d\) from our Private key.
