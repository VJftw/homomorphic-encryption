unique_name: el_gamal_ecc
readable_name: ElGamal ECC
description: The ElGamal ECC additive somewhat homomorphic encryption scheme
capabilities:
 - +
stages:
  - name: Key Generation
    steps:
      - description: Generate random prime \(p\)
        compute: p = generateRandomPrime()
      - description: let the generator be a primitive root of \(p\) to get \(g\)
        compute: g = primitiveRoot(p)
      - description: let the secret be a random arbitrary number between \(1\) and \(p\) to get \(x\)
        compute: x = randomArbitrary(1, p)
      - description: Calculate \(g^x \bmod p\) to get \(h\)
        compute: h = g & x,p
  - name: Encryption
    steps:
      - description: let \(y\) be a random arbitrary number between \(0\) and \(p\)
        compute: y = randomArbitrary(0, p)
      - description: Encrypt \(a\) by calculating \((a \cdot (h^y \bmod p)) \bmod p\) to get \(aX\)
        compute: aX = (a * (h & y,p)) % p
        public: true
      - description: Encrypt \(b\) by calculating \((b \cdot (h^y \bmod p)) \bmod p\) to get \(bX\)
        compute: bX = (b * (h & y,p)) % p
        public: true
  - name: Backend
    operation: +
    steps:
      - description: Calculate \(aX + bX\) to get \(cX\)
        compute: cX = aX + bX
  - name: Decryption
    steps:
      - description: let \(u = g^y \bmod p\)
        compute: u = g & y,p
      - description: let \(v = u^x \bmod p\)
        compute: v = u & x,p
      - description: let \(w = v^{-1} \bmod p\)
        compute: w = v $ p
      - description: Calculate \(w \cdot cX \bmod p\) to get \(c\)
        compute: c = (w * cX) % p